<project name="HMMWeka" default="compile" basedir=".">
<!-- 
  ===========================================================================
   Ant build file for weka a weka package. 

   Type ant -projecthelp for targets and descriptions.

   $Revision: 6663 $
  ===========================================================================
-->

  <!-- set global properties for this build -->
  <property name="src" value="src/main/java"/>
  <property name="src-test" value="src/test"/>
  <property name="lib" value="lib" />
  <property name="build" value="build"/>
  <property name="dist"  value="dist"/>
  <property name="doc"  value="doc"/>
  <property name="web"  value="web"/>
  <property name="javac_max_memory" value="256m"/>
  <property name="debug" value="on" />
  <property name="package" value="HMM" />
	
  <property name="project.name" value="HMMWeka" />
  <property name="project.packagename" value="HMM" />
  <property name="project.version" value="0.1.1" />
  <property name="project.copyright" value="(c) 2010" />
  <property name="project.dependencies" value="none" />
  <property name="project.keywords" value="machine learning, sequence learning, hidden markov model, gesture recognition" />
  <property name="author.name" value="Marco Gillies" />
  <property name="author.url" value="http://doc.gold.ac.uk/~mas02mg" />
  <property name="tested.platform" value="osx" />
  <property name="tested.wekaversion" value="3.7.3" />
  <property name="source.host" value="github" />
  <property name="source.url" value="https://github.com/marcogillies/HMMWeka" />
  <property name="source.repository" value="https://github.com/marcogillies/HMMWeka" />
	
  

  <target name="init_all">
    <!-- Create the time stamp -->
    <tstamp/>
  </target>

   <!-- general classpath definition, incl. CLASSPATH env. variable,
   // but jars in lib directory have precedence over the CLASSPATH variable -->
  <path id="project.class.path">
    <fileset dir="${lib}">
      <include name="*.jar"/>
      <include name="*.zip"/>
    </fileset>
    <pathelement location="${build}/classes"/>
    <pathelement location="${build}/testcases"/>
    <pathelement path="${java.class.path}" />
  </path>

  <!-- Create the time stamp -->
  <tstamp> 
		<format property="date" pattern="MM/dd/yyyy" offset="0" unit="hour"/>
  </tstamp>	
	
<!-- 
 ============================================================================
 Compilation and documentation making stuff
 ============================================================================
-->

  <target name="init_compile" depends="init_all">
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}/classes"/>
  </target>

  <!-- Compile the java code from ${src}/weka into ${build}/classes -->
  <target name="compile" depends="init_compile" 
   description="Compile package and deposit class files in build/classes">
    <javac srcdir="${src}" 
      fork="yes" memoryMaximumSize="${javac_max_memory}"
      destdir="${build}/classes"
      optimize="${optimization}"
      debug="${debug}"
      includeantruntime="false"
      deprecation="${deprecation}"
      source="1.6" target="1.6">

      <classpath refid="project.class.path" /> 
    </javac>
    <copy todir="${build}/classes" >
       <fileset dir="${src}">
         <include name="**/*.gif"/>
         <include name="**/*.png"/>
         <include name="**/*.jpeg"/>
         <include name="**/*.jpg"/>
         <include name="**/*.props"/>
         <include name="**/*.txt"/>
         <include name="**/*.xml"/>
         <include name="**/*.cup"/>
         <include name="**/*.flex"/>
         <include name="**/*.jflex"/>
         <include name="**/*.properties"/>
         <include name="**/*.default"/>
       </fileset>
    </copy>
  </target>

  <!-- Make the javadocs -->
  <target name="docs" 
          depends="init_all" 
          description="Make javadocs into ./doc">
    <mkdir dir="${doc}"/>
    <javadoc sourcepath="${src}" 
             classpathref="project.class.path"
             destdir="${doc}" 
             Author="yes" 
             Public="yes"
             link="http://weka.sourceforge.net/doc.dev/"
             maxmemory="256m"/>          
  </target> 


<!--
  ===========================================================================
  Unit testing stuff
  ===========================================================================
-->
<!-- Junit testing initialization -->
  <target name="init_tests" depends="init_all">
    <available property="junit.present" classname="junit.framework.TestCase"/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}/testcases"/>
    <!-- make this if it doesn't exist so that the compile_test task doesn't faile for 
         stuff that doesn't have test cases -->
    <mkdir dir="${src-test}"/>
  </target>

	
  <!-- compile the testcases -->
  <target name="compile_tests" depends="init_tests, compile" 
   description="Compile unit tests into build/testcases">
     <javac srcdir="${src-test}" 
       fork="yes" memoryMaximumSize="${javac_max_memory}"
            destdir="${build}/testcases"
            optimize="${optimization}"
            debug="${debug}"
            deprecation="${deprecation}"
            source="1.6" target="1.6">
       <classpath refid="project.class.path" /> 
     </javac>
     <copy todir="${build}/testcases" >
       <fileset dir="${src-test}">
          <include name="**/*.arff"/>
          <include name="**/*.cost"/>
          <include name="**/*.xml"/>
          <include name="**/*.matrix"/>
       </fileset>
     </copy>
  </target>

  <!-- Put everything in ${build}/testcases into the ${package}-tests.jar file -->
  <target name="jar_tests" depends="compile_tests, init_dist"
   description="Creates a jar file with the test cases in ./dist. Run with -Dpackage=[package name]">
    <jar jarfile="${dist}/${package}-tests.jar" 
      basedir="${build}/testcases">
    </jar>
  </target>
	
  <target name="run_tests" depends="jar_tests" 
	description="runs the junit tests">
  	<junit printsummary="yes" haltonfailure="yes">
  	    <classpath>
  	    	<fileset dir="${lib}">
		      <include name="*.jar"/>
		      <include name="*.zip"/>
		    </fileset>
		    <pathelement location="${build}/classes"/>
		    <pathelement location="${build}/testcases"/>
		    <pathelement path="${java.class.path}" />
  	    </classpath>
  		
  		
	  	<test name="weka.estimators.TestDiscreteHMMEstimator"
	  	             haltonfailure="no" outfile="TestDiscreteHMMEstimator.result">
	  		<formatter type="plain"/>
	  	</test>
	  	<test name="weka.classifiers.bayes.TestHMMClassifiers"
	  	             haltonfailure="no" outfile="TestHMMClassifiers.result">
	  		<formatter type="plain"/>
	  	</test>
	  	<test name="weka.estimators.TestMultivariateNormalEstimator"
	  	             haltonfailure="no" outfile="TestMultivariateNormalEstimator.result">
	  		<formatter type="plain"/>
	  	</test>
	  	<!--test name="weka.estimators.TestMultivariateNormalHMMEstimator"
	  	             haltonfailure="no" outfile="TestMultivariateNormalHMMEstimator.result">
	  		<formatter type="plain"/>
	  	</test-->
  	</junit>
  </target>

<!--
  ===========================================================================
  Release making stuff
  ===========================================================================
-->

  <target name = "init_dist" depends="init_all">
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}"/>
  </target>

  <!-- Put everything in ${build}/classes into the ${package}.jar file -->
  <target name="exejar" depends="compile, docs, init_dist"
   description="Create a binary jar file in ./dist">
    <jar jarfile="${dist}/${package}.jar" 
      basedir="${build}/classes">
    </jar>
  </target>

  <target name="make_package" depends="exejar" description="Make the package zip file. Run with -Dpackage=[package name]">
    <mkdir dir="${dist}/${package}"/>
    <copy todir="${dist}/${package}">
      <fileset dir="${dist}">
        <include name="*.jar"/>
      </fileset>
    </copy>
    <delete>
      <fileset dir="${dist}">
        <include name="*.jar"/>
      </fileset>
    </delete>
    <copy file="Description.props"
          todir="${dist}/${package}"/>
    <!--mkdir dir="${dist}/${package}/lib"/>
    <copy todir="${dist}/${package}/lib" >
       <fileset dir="${lib}">
         <include name="*.jar"/>
         <include name="*.zip"/>
       </fileset>
    </copy-->
  	<copy file="PythonScripts/NominalSequence.arff"
  	          todir="${dist}/${package}"/>
  	<copy file="PythonScripts/NumericSequence.arff"
  	          todir="${dist}/${package}"/>
    <mkdir dir="${dist}/${package}/doc"/>
    <copy todir="${dist}/${package}/doc" >
       <fileset dir="${doc}">
         <include name="**/*"/>
       </fileset>
    </copy>
    <mkdir dir="${dist}/${package}/src"/>

    <copy todir="${dist}" >
       <fileset dir="${web}">
         <include name="**/*"/>
       </fileset>
    </copy>
  	
  	<replaceregexp file="${dist}/index.html"
  	  	                         match="##project.name##"
  	  	                         replace="${project.name}"
  	  	                         flags="g" />
  	
  	<replaceregexp file="${dist}/index.html"
  	  	                         match="##project.packagename##"
  	  	                         replace="${project.packagename}"
  	  	                         flags="g" />

  	
  	<replaceregexp file="${dist}/index.html"
							match="##author.name##"
							replace="${author.name}"
							flags="g" />
  	
	  	<replaceregexp file="${dist}/index.html"
							match="##project.version##"
							replace="${project.version}"
							flags="g" />
  	
		<replaceregexp file="${dist}/index.html"
							match="##author.url##"
  							replace="${author.url}"
							flags="g" />
  	
	  	<replaceregexp file="${dist}/index.html"
  							match="##date##"
  	  						replace="${date}"
  	  						flags="g" />
  	  						
  		 <replaceregexp file="${dist}/index.html"
  							match="##project.keywords##"
  	  						replace="${project.keywords}"
  	  						flags="g" />
  	  						
  	  						
	  	 <replaceregexp file="${dist}/index.html"
  							match="##tested.platform##"
  	  						replace="${tested.platform}"
  	  						flags="g" />
  	  						
  		 <replaceregexp file="${dist}/index.html"
  							match="##tested.wekaversion##"
  	  						replace="${tested.wekaversion}"
  	  						flags="g" />
  	  						
	  	 <replaceregexp file="${dist}/index.html"
  							match="##project.dependencies##"
  	  						replace="${project.dependencies}"
  	  						flags="g" />
  	  						
	  	 <replaceregexp file="${dist}/index.html"
  							match="##source.host##"
  	  						replace="${source.host}"
  	  						flags="g" />
  	  						
	  	 <replaceregexp file="${dist}/index.html"
  							match="##source.url##"
  	  						replace="${source.url}"
  	  						flags="g" />
  	  						
	  	 <replaceregexp file="${dist}/index.html"
  							match="##source.repository##"
  	  						replace="${source.repository}"
  	  						flags="g" />
  	  						
  	  	<replaceregexp file="${dist}/index.html"
  							match="##project.copyright##"
  	  						replace="${project.copyright}"
  	  						flags="g" />
		
  	
    <copy todir="${dist}/${package}" >
       <fileset dir=".">
         <include name="*.xml"/>
         <include name="src/**/*.excludes"/>
         <include name="src/**/*.gif"/>
         <include name="src/**/*.java"/>
         <include name="src/**/*.jpeg"/>
         <include name="src/**/*.jpg"/>
         <include name="src/**/*.props"/>
         <include name="src/**/*.txt"/>
         <include name="src/**/*.xml"/>
         <include name="src/**/*.cup"/>
         <include name="src/**/*.flex"/>
         <include name="src/**/*.jflex"/>
         <include name="src/**/*.properties"/>
         <include name="src/**/*.default"/>
         <include name="src/**/*.cost"/>
         <include name="src/**/*.arff"/>
         <include name="src/**/*.matrix"/>
       </fileset>
    </copy>
    <zip destfile="${dist}/${package}.zip" 
      basedir="${dist}/${package}">
    </zip>
  </target>

  <!-- Put all .java, and .props files into ${dist}/${package}-src.jar-->
  <target name="srcjar" depends="init_dist, init_all"
   description="Create a jar file containing weka source in ./dist. Run with -Dpackage=[package name]">  
    <!-- jar up the source -->
    <jar jarfile="${dist}/${package}-src.jar" 
      basedir=".">
      <include name="*.xml"/>
      <include name="src/**/*.excludes"/>
      <include name="src/**/*.gif"/>
      <include name="src/**/*.java"/>
      <include name="src/**/*.jpeg"/>
      <include name="src/**/*.jpg"/>
      <include name="src/**/*.props"/>
      <include name="src/**/*.txt"/>
      <include name="src/**/*.xml"/>
      <include name="src/**/*.cup"/>
      <include name="src/**/*.flex"/>
      <include name="src/**/*.jflex"/>
      <include name="src/**/*.properties"/>
      <include name="src/**/*.default"/>
      <include name="src/**/*.cost"/>
      <include name="src/**/*.arff"/>
      <include name="src/**/*.matrix"/>
      <include name="lib/**/*.jar"/>
    </jar>
  </target>

<!-- Clean -->
  <target name="clean" depends="init_all"
   description="Removes the build, dist and reports directories">
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
  </target>

  <target name="superclean" depends="clean"
   description="Clean plus removes source trees! and doc directories">
  <!-- WARNING, this deletes the source and doc directories -->
    <delete dir="${src}"/>
    <delete dir="${doc}"/>
  </target>
</project>
